import discord
from discord import app_commands
from discord.ext import commands
from datetime import datetime
import pyaudio
import wave
import asyncio
import openai
from io import BytesIO
import requests
import mysql.connector
from mysql.connector import Error
import speech_recognition as sr


TOKEN = ''
OPENAI_API_KEY = ''

intents = discord.Intents.default()
intents.members = True
intents.message_content = True
intents.voice_states = True

bot1 = commands.Bot(command_prefix='!', intents=intents)

lessons_start = {}

openai.api_key = OPENAI_API_KEY

db_config = {
    'user': 'root',
    'password': 'root',
    'host': 'localhost',
    'database': 'vadimbot1',
    'raise_on_warnings': True
}
conn = mysql.connector.connect(**db_config)
cursor = conn.cursor()


def summarize_text(input_text, max_tokens=1500):
    response = openai.Completion.create(
        engine="gpt-3.5-turbo-instruct",  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é –º–æ–¥–µ–ª–∏
        prompt=f"–°–¥–µ–ª–∞–π –∫–æ–Ω—Å–ø–µ–∫—Ç —Ç–µ–∫—Å—Ç–∞, —É–±—Ä–∞–≤ –ª–∏—à–Ω–∏–µ —Å–ª–æ–≤–∞:\n\n{input_text}",
        max_tokens=max_tokens,
        temperature=0.5  # –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä, —á—Ç–æ–±—ã –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
    )
    return response.choices[0].text.strip()


async def list_lessons(ctx):
    cursor.execute("SELECT lesson_name FROM lessons")
    lessons = cursor.fetchall()
    if lessons:
        embed = discord.Embed(title=":bank: **–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–∫–∏** :bank:", color=0x3498db)
        for index, lesson in enumerate(lessons, start=1):
            lesson_name = lesson[0].decode('utf-8') if isinstance(lesson[0], bytearray) else lesson[0]
            embed.add_field(name=f"üìö{index}. **{lesson_name}**", value=f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `!–≤—ã—Å–ª–∞—Ç—å —É—Ä–æ–∫#{index}` –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è", inline=False)
        await ctx.send(embed=embed)
    else:
        await ctx.send("–£—Ä–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")


async def send_lesson(ctx, lesson_index):
    lesson_index1 = lesson_index[(lesson_index.index("#") + 1):]
    print(lesson_index1)
    cursor.execute("SELECT extracted_text FROM audio_texts WHERE id = %s", (lesson_index1,))
    text_data = cursor.fetchone()
    if text_data:
        extracted_text = summarize_text(text_data[0])

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –∏ –≤–æ–∑–º–æ–∂–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        if len(extracted_text) > 2000:  # Discord –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è 2000 —Å–∏–º–≤–æ–ª–∞–º–∏
            parts = [extracted_text[i:i + 2000] for i in range(0, len(extracted_text), 2000)]
            for part in parts:
                await ctx.send(part)  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ctx.send –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        else:
            await ctx.send(extracted_text)  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ctx.send –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    else:
        await ctx.send("–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Ç–µ–∫—Å—Ç —É—Ä–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω.")


# def speech_recognitor(file):
#     recognizer = sr.Recognizer()
#     audio_file = file
#
#     try:
#         # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
#         connection = mysql.connector.connect(
#             host='localhost',
#             database='vadimbot1',
#             user='root',
#             password='root'
#         )
#         cursor = connection.cursor()
#
#         with sr.AudioFile(audio_file) as source:
#             audio_data = recognizer.record(source)
#             try:
#                 text = recognizer.recognize_google(audio_data, language="ru-RU")
#                 print("–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –∞—É–¥–∏–æ:", text)
#                 # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
#                 query = "INSERT INTO audio_texts (extracted_text) VALUES (%s)"
#                 cursor.execute(query, (text,))
#                 connection.commit()
#                 print("–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
#             except sr.UnknownValueError:
#                 print("Google Speech Recognition –Ω–µ —Å–º–æ–≥ –ø–æ–Ω—è—Ç—å –∞—É–¥–∏–æ")
#             except sr.RequestError as e:
#                 print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —É —Å–ª—É–∂–±—ã Google Speech Recognition; {e}")
#
#     except Error as e:
#         print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ MySQL", e)
#     finally:
#         if connection.is_connected():
#             cursor.close()
#             connection.close()
#             print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MySQL –∑–∞–∫—Ä—ã—Ç–æ")
#
#
# @bot1.command(name='—É—Ä–æ–∫–∏')
# async def —É—Ä–æ–∫–∏(ctx):
#     if ctx.guild is None:
#         await ctx.send('–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ "–Ø–Ω–¥–µ–∫—Å –õ–∞–≤–∫–∞"')
#         return
#
#     if str(ctx.guild.id) != '1028293393245286440':
#         await ctx.send('–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ "–Ø–Ω–¥–µ–∫—Å –õ–∞–≤–∫–∞"')
#         return
#     await list_lessons(ctx)
#
#
# @bot1.command(name='–≤—ã—Å–ª–∞—Ç—å')
# async def send_lesson_command(ctx, *, text):
#     if ctx.guild is None:
#         await ctx.send('–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ "–Ø–Ω–¥–µ–∫—Å –õ–∞–≤–∫–∞"')
#         return
#
#     if str(ctx.guild.id) != '1028293393245286440':
#         await ctx.send('–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ "–Ø–Ω–¥–µ–∫—Å –õ–∞–≤–∫–∞"')
#         return
#     await send_lesson(ctx, text)
#
#
# @bot1.command(name='–∫–æ–º–∞–Ω–¥—ã')
# async def commands_list(ctx):
#     if ctx.guild is None:
#         await ctx.send('–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ "–Ø–Ω–¥–µ–∫—Å –õ–∞–≤–∫–∞"')
#         return
#
#     if str(ctx.guild.id) != '1028293393245286440':
#         await ctx.send('–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ "–Ø–Ω–¥–µ–∫—Å –õ–∞–≤–∫–∞"')
#         return
#     # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ —Ü–≤–µ—Ç–æ–º
#     embed = discord.Embed(title='–ö–æ–º–∞–Ω–¥—ã', color=0xFF5733)
#     # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π
#     embed.add_field(name='!–∑–∞–ø—Ä–æ—Å', value='–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ª—é–±—ã–µ –∑–∞–ø—Ä–æ—Å—ã', inline=False)
#     embed.add_field(name='!–≥–µ–Ω–µ—Ä–∞—Ü–∏—è', value='–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É –ø–æ –∑–∞–ø—Ä–æ—Å—É', inline=False)
#     embed.add_field(name='!–≤—ã—Å–ª–∞—Ç—å', value='–í—ã—Å—ã–ª–∞–µ—Ç –∫–æ–Ω—Å–ø–µ–∫—Ç —É—Ä–æ–∫–∞', inline=False)
#     embed.add_field(name='!—É—Ä–æ–∫ –Ω–∞—á–∞—Ç—å', value='–ù–∞—á–∏–Ω–∞–µ—Ç —É—Ä–æ–∫', inline=False)
#     embed.add_field(name='!—É—Ä–æ–∫ –∑–∞–∫–æ–Ω—á–∏—Ç—å', value='–ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç —É—Ä–æ–∫', inline=False)
#     embed.add_field(name='!—É—Ä–æ–∫–∏', value='–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Ä–æ–∫–æ–≤', inline=False)
#     embed.add_field(name='!–≥—Ä—É–ø–ø–∞1', value='–õ–∏—Å—Ç 1 –≥—Ä—É–ø–ø—ã', inline=False)
#     embed.add_field(name='!–≥—Ä—É–ø–ø–∞2', value='–õ–∏—Å—Ç 2 –≥—Ä—É–ø–ø—ã', inline=False)
#     embed.add_field(name='!–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ', value='–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç—Å—É—Ç—Å–≤—É—é—â–∏—Ö', inline=False)
#
#     # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª
#     await ctx.send(embed=embed)
#
#
# def save_voice_file_to_db(file_path):
#     try:
#         connection = mysql.connector.connect(
#             host='localhost',
#             database='vadimbot1',
#             user='root',
#             password='root'
#         )
#         cursor = connection.cursor()
#
#         with open(file_path, 'rb') as file:
#             binary_data = file.read()
#
#         query = "INSERT INTO audio_files (filename, audio_data) VALUES (%s, %s)"
#         current_date = datetime.now().strftime("%d.%m.%Y")
#         cursor.execute(query, (f"–£—Ä–æ–∫ –Ø.–õ - {current_date}.wav", binary_data))
#         connection.commit()
#         print("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
#     except Error as e:
#         print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –≤ –ë–î: {e}")
#     finally:
#         if connection.is_connected():
#             cursor.close()
#             connection.close()
#
#
# def save_file2():
#     connection = None
#     cursor = None
#     try:
#         # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
#         connection = mysql.connector.connect(
#             host='localhost',
#             database='vadimbot1',
#             user='root',
#             password='root'
#         )
#         cursor = connection.cursor()
#
#         # –°–æ–∑–¥–∞–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–∞
#         query = "INSERT INTO lessons (lesson_name) VALUES (%s)"
#         current_date = datetime.now().strftime("%d.%m.%Y")
#         lesson_name = f"–£—Ä–æ–∫ –Ø.–õ - {current_date}"
#
#         # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
#         cursor.execute(query, (lesson_name,))
#
#         # –§–∏–∫—Å–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
#         connection.commit()
#         print("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
#     except Error as e:
#         print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –≤ –ë–î: {e}")
#     finally:
#         # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
#         if connection and connection.is_connected():
#             cursor.close()
#             connection.close()
#             print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.")
#
#
# def generate_image(text):
#     response = openai.Image.create(
#         model="dall-e-3",
#         prompt=str(text),
#         n=1,
#         size="1024x1024"
#     )
#     image_url = response.data[0].url
#     response = requests.get(image_url)
#     image_bytes = BytesIO(response.content)
#     return image_bytes
#
#
# def generate_text(prompt, max_tokens=1500):
#     # –ó–∞–ø—Ä–æ—Å –∫ GPT API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
#     response = openai.Completion.create(
#         engine="gpt-3.5-turbo-instruct",
#         prompt=prompt,
#         max_tokens=max_tokens
#     )
#     return response.choices[0].text.strip()
#
#
# @bot1.command()
# async def –≥–µ–Ω–µ—Ä–∞—Ü–∏—è(ctx, *, text):
#     if ctx.guild is None:
#         await ctx.send('–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ "–Ø–Ω–¥–µ–∫—Å –õ–∞–≤–∫–∞"')
#         return
#
#     if str(ctx.guild.id) != '1028293393245286440':
#         await ctx.send('–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ "–Ø–Ω–¥–µ–∫—Å –õ–∞–≤–∫–∞"')
#         return
#     image_bytes = generate_image(text)
#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã !–≥–µ–Ω–µ—Ä–∞—Ü–∏—è
#     await ctx.channel.send(file=discord.File(fp=image_bytes, filename='image.png'))
#
#
# @bot1.command()
# async def –∑–∞–ø—Ä–æ—Å(ctx, *, text):
#     if ctx.guild is None:
#         await ctx.send('–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ "–Ø–Ω–¥–µ–∫—Å –õ–∞–≤–∫–∞"')
#         return
#
#     if str(ctx.guild.id) != '1028293393245286440':
#         await ctx.send('–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ "–Ø–Ω–¥–µ–∫—Å –õ–∞–≤–∫–∞"')
#         return
#     response_text = generate_text(text)
#     max_length = 2000
#     if len(response_text) <= max_length:
#         await ctx.send(response_text)
#     else:
#         for i in range(0, len(response_text), max_length):
#             await ctx.send(response_text[i:i + max_length])

is_recording = False
frames = []
vc = None


@bot1.command()
async def —É—Ä–æ–∫(ctx, *, option: str):
    if ctx.guild is None:
        await ctx.send('–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ "–Ø–Ω–¥–µ–∫—Å –õ–∞–≤–∫–∞"')
        return

    if str(ctx.guild.id) != '1028293393245286440':
        await ctx.send('–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ "–Ø–Ω–¥–µ–∫—Å –õ–∞–≤–∫–∞"')
        return
    if option == "–Ω–∞—á–∞—Ç—å":
        if ctx.author.voice:
            voice_channel = ctx.author.voice.channel
            global vc
            vc = await voice_channel.connect()
            lessons_start[ctx.guild.id] = datetime.now()
            print(f"–£—Ä–æ–∫ –Ω–∞—á–∞—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {ctx.guild.id}")
            await ctx.send("–£—Ä–æ–∫ –Ω–∞—á–∞–ª—Å—è!")
            # –ó–∞–ø–∏—Å—å –∞—É–¥–∏–æ, —Ñ—É–Ω–∫—Ü–∏—è record_audio –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π
            audio = pyaudio.PyAudio()
            await record_audio(ctx, audio)
        else:
            await ctx.send("–í—ã –¥–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ.")

    elif option == "–∑–∞–∫–æ–Ω—á–∏—Ç—å":
        global is_recording
        if is_recording:
            if vc:
                await vc.disconnect()
                vc = None
            is_recording = False
            if ctx.guild.id in lessons_start:
                lesson_duration = datetime.now() - lessons_start.pop(ctx.guild.id)
                minutes, seconds = divmod(lesson_duration.seconds, 60)
                await ctx.send(f"–£—Ä–æ–∫ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è! –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Ä–æ–∫–∞: {minutes} –º–∏–Ω—É—Ç {seconds} —Å–µ–∫—É–Ω–¥.")
            else:
                await ctx.send("–£—Ä–æ–∫ –Ω–µ –±—ã–ª –Ω–∞—á–∞—Ç –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ.")
        else:
            await ctx.send("–ó–∞–ø–∏—Å—å –Ω–µ –≤–µ–¥–µ—Ç—Å—è.")




async def record_audio(ctx, audio):
    global is_recording, vc
    is_recording = True
    FORMAT = pyaudio.paInt16
    CHANNELS = 1
    RATE = 44100
    CHUNK = 1024
    WAVE_OUTPUT_FILENAME = "output.wav"

    stream = audio.open(format=FORMAT, channels=CHANNELS,
                        rate=RATE, input=True,
                        frames_per_buffer=CHUNK)
    frames = []

    while is_recording:
        data = stream.read(CHUNK)
        frames.append(data)

    stream.stop_stream()
    stream.close()
    audio.terminate()

    wf = wave.open(WAVE_OUTPUT_FILENAME, 'wb')
    wf.setnchannels(CHANNELS)
    wf.setsampwidth(audio.get_sample_size(FORMAT))
    wf.setframerate(RATE)
    wf.writeframes(b''.join(frames))
    wf.close()


#     zvyk = discord.File(WAVE_OUTPUT_FILENAME)
#     await ctx.speech_recognitor(WAVE_OUTPUT_FILENAME)
#     await ctx.save_voice_file_to_db(WAVE_OUTPUT_FILENAME)
#     await ctx.save_file2()
#     # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –≤ —á–∞—Ç –Ω–µ —Ä–æ–±–∏—Ç
#     await ctx.response.send_message("–ê—É–¥–∏–æ–∑–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –±–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω –æ—Ç –∫–∞–Ω–∞–ª–∞!", file=zvyk)
#
#
# @bot1.command()
# async def voice_list(interaction):
#     voice_channel_members = []
#     for guild in bot1.guilds:
#         for channel in guild.voice_channels:
#             for member in channel.members:
#                 voice_channel_members.append(member.name)
#     if voice_channel_members:
#         await interaction.response.send_message("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö:\n" +
#                                                 '\n'.join(voice_channel_members))
#     else:
#         await interaction.response.send_message("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö")
#
#
# # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏—è
# message_id_for_reactions = None
#
#
# @bot1.command()
# async def —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è(ctx):
#     if ctx.guild is None:
#         await ctx.send('–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ "–Ø–Ω–¥–µ–∫—Å –õ–∞–≤–∫–∞"')
#         return
#
#     if str(ctx.guild.id) != '1028293393245286440':
#         await ctx.send('–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ "–Ø–Ω–¥–µ–∫—Å –õ–∞–≤–∫–∞"')
#         return
#     # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
#     message = await ctx.send("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É:")
#
#     # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–π –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
#     await message.add_reaction('1Ô∏è‚É£')
#     await message.add_reaction('2Ô∏è‚É£')
#
#     # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏–ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
#     global message_id_for_reactions
#     message_id_for_reactions = message.id
#
# # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª—É—à–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–∞–∫—Ü–∏–π
# @bot1.event
# async def on_reaction_add(reaction, user):
#     if reaction.message.id != message_id_for_reactions or user == bot1.user:
#         return
#
#     # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–º–æ–¥–∑–∏ —Ä–µ–∞–∫—Ü–∏–∏
#     group_name = '–ì—Ä—É–ø–ø–∞ 1' if str(reaction.emoji) == '1Ô∏è‚É£' else '–ì—Ä—É–ø–ø–∞ 2'
#
#     # –ü—Ä–æ—Å—å–±–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–≤–µ—Å—Ç–∏ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –≤ —á–∞—Ç
#     def check(m):
#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ç–æ–≥–æ –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤ —Ç–æ–º –∂–µ –∫–∞–Ω–∞–ª–µ
#         return m.author == user and m.channel == reaction.message.channel
#
#     # –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     await reaction.message.channel.send(f"{user.mention}, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è.")
#     try:
#         response = await bot1.wait_for('message', timeout=60.0, check=check)
#     except asyncio.TimeoutError:
#         await reaction.message.channel.send("–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
#         return
#     else:
#         name = response.content
#         # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
#         discord_id = str(user.id)
#         await save_to_database(name, group_name, discord_id, user, reaction.message.channel)
#
#
# async def save_to_database(name, group_name, discord_id, user, channel):
#     try:
#         # –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
#         connection = mysql.connector.connect(host='localhost', database='vadimbot1', user='root', password='root')
#         cursor = connection.cursor()
#
#         # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
#         check_query = "SELECT * FROM participants WHERE name_discord = %s"
#         cursor.execute(check_query, (discord_id,))
#         result = cursor.fetchone()
#
#         if result:
#             await channel.send("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
#         else:
#             # SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
#             query = "INSERT INTO participants (name, group_name, name_discord) VALUES (%s, %s, %s)"
#             values = (name, group_name, discord_id)
#
#             cursor.execute(query, values)
#             connection.commit()
#
#             await channel.send(f"–£—á–∞—Å—Ç–Ω–∏–∫ {name} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ {group_name}.")
#
#     except Exception as e:
#         await channel.send(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
#     finally:
#         if connection.is_connected():
#             cursor.close()
#             connection.close()
#
#
# @bot1.event
# async def on_raw_reaction_add(payload: discord.RawReactionActionEvent):
#     # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ä–µ–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ –Ω—É–∂–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
#     if payload.message_id != message_id_for_reactions:
#         return
#
#     # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–µ—Ä–≤–µ—Ä–∞ –∏ –∫–∞–Ω–∞–ª–∞
#     guild = bot1.get_guild(payload.guild_id)
#     channel = guild.get_channel(payload.channel_id)  # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∫–∞–Ω–∞–ª–∞
#     member = guild.get_member(payload.user_id)
#
#     # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π —Ä–µ–∞–∫—Ü–∏–∏ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏
#     if str(payload.emoji) == '1Ô∏è‚É£':
#         role = discord.utils.get(guild.roles, name="1 –≥—Ä—É–ø–ø–∞")
#         if role:
#             await member.add_roles(role)
#             await channel.send(f"{member.mention}, –≤—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ 1 –≥—Ä—É–ø–ø—É.")
#         else:
#             await channel.send("–†–æ–ª—å '1 –≥—Ä—É–ø–ø–∞' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
#     elif str(payload.emoji) == '2Ô∏è‚É£':
#         role = discord.utils.get(guild.roles, name="2 –≥—Ä—É–ø–ø–∞")
#         if role:
#             await member.add_roles(role)
#             await channel.send(f"{member.mention}, –≤—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ 2 –≥—Ä—É–ø–ø—É.")
#         else:
#             await channel.send("–†–æ–ª—å '2 –≥—Ä—É–ø–ø–∞' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
#
#
# @bot1.command(name='–≥—Ä—É–ø–ø–∞1')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–æ–±–µ–ª—ã –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã –≤ –∏–º–µ–Ω–∞—Ö –∫–æ–º–∞–Ω–¥
# async def group_one(ctx):
#     if ctx.guild is None:
#         await ctx.send('–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ "–Ø–Ω–¥–µ–∫—Å –õ–∞–≤–∫–∞"')
#         return
#
#     if str(ctx.guild.id) != '1028293393245286440':
#         await ctx.send('–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ "–Ø–Ω–¥–µ–∫—Å –õ–∞–≤–∫–∞"')
#         return
#     # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
#     db_config = {
#         'user': 'root',
#         'password': 'root',
#         'host': 'localhost',
#         'database': 'vadimbot1'
#     }
#     # –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
#     try:
#         conn = mysql.connector.connect(**db_config)
#         cursor = conn.cursor()
#
#         # SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –ø–µ—Ä–≤–æ–π –≥—Ä—É–ø–ø—ã
#         query = "SELECT name FROM participants WHERE group_name = '–ì—Ä—É–ø–ø–∞ 1'"
#         cursor.execute(query)
#
#         # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
#         participants = cursor.fetchall()
#         if participants:
#             # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (embed) —Å–æ —Å–ø–∏—Å–∫–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
#             embed = discord.Embed(title="–£—á–∞—Å—Ç–Ω–∏–∫–∏ 1 –≥—Ä—É–ø–ø—ã:", color=0xFF5733)
#             for index, participant in enumerate(participants, start=1):
#                 # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞
#                 full_name = participant[0].split()
#                 first_name = full_name[0].capitalize()
#                 last_name = full_name[1].capitalize() if len(full_name) > 1 else ""
#
#                 # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ "1. –ò. –§–∞–º–∏–ª–∏—è"
#                 display_name = f"{index}. {first_name[0]}. {last_name}"
#                 embed.add_field(name=display_name, value="", inline=False)
#             await ctx.send(embed=embed)
#         else:
#             await ctx.send("–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ 1 –≥—Ä—É–ø–ø–µ –Ω–µ—Ç.")
#     except mysql.connector.Error as e:
#         await ctx.send(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
#     finally:
#         if conn.is_connected():
#             cursor.close()
#             conn.close()
#
#
# @bot1.command(name='–≥—Ä—É–ø–ø–∞2')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–æ–±–µ–ª—ã –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã –≤ –∏–º–µ–Ω–∞—Ö –∫–æ–º–∞–Ω–¥
# async def group_one(ctx):
#     if ctx.guild is None:
#         await ctx.send('–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ "–Ø–Ω–¥–µ–∫—Å –õ–∞–≤–∫–∞"')
#         return
#
#     if str(ctx.guild.id) != '1028293393245286440':
#         await ctx.send('–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ "–Ø–Ω–¥–µ–∫—Å –õ–∞–≤–∫–∞"')
#         return
#     # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
#     db_config = {
#         'user': 'root',
#         'password': 'root',
#         'host': 'localhost',
#         'database': 'vadimbot1'
#     }
#     # –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
#     try:
#         conn = mysql.connector.connect(**db_config)
#         cursor = conn.cursor()
#
#         # SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –ø–µ—Ä–≤–æ–π –≥—Ä—É–ø–ø—ã
#         query = "SELECT name FROM participants WHERE group_name = '–ì—Ä—É–ø–ø–∞ 2'"
#         cursor.execute(query)
#
#         # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
#         participants = cursor.fetchall()
#         if participants:
#             # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (embed) —Å–æ —Å–ø–∏—Å–∫–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
#             embed = discord.Embed(title="–£—á–∞—Å—Ç–Ω–∏–∫–∏ 1 –≥—Ä—É–ø–ø—ã:", color=0xFF5733)
#             for index, participant in enumerate(participants, start=1):
#                 # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞
#                 full_name = participant[0].split()
#                 first_name = full_name[0].capitalize()
#                 last_name = full_name[1].capitalize() if len(full_name) > 1 else ""
#
#                 # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ "1. –ò. –§–∞–º–∏–ª–∏—è"
#                 display_name = f"{index}. {first_name[0]}. {last_name}"
#                 embed.add_field(name=display_name, value="", inline=False)
#             await ctx.send(embed=embed)
#         else:
#             await ctx.send("–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤–æ 2 –≥—Ä—É–ø–ø–µ –Ω–µ—Ç.")
#     except mysql.connector.Error as e:
#         await ctx.send(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
#     finally:
#         if conn.is_connected():
#             cursor.close()
#             conn.close()
#
#
# async def get_missing_users_in_channel(voice_channel):
#     try:
#         # –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
#         connection = mysql.connector.connect(host='localhost', database='vadimbot1', user='root', password='root')
#         cursor = connection.cursor()
#
#         # –ü–æ–ª—É—á–∞–µ–º ID –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ
#         member_ids = [str(member.id) for member in voice_channel.members]
#
#         # SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ
#         query = """
#                 SELECT name, group_name
#                 FROM participants
#                 WHERE name_discord NOT IN ({})
#                 """.format(','.join(['%s']*len(member_ids)))
#         cursor.execute(query, member_ids)
#
#         # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
#         missing_users = [(row[0], row[1]) for row in cursor.fetchall()]
#
#         return missing_users
#
#     except Exception as e:
#         print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
#         return []
#
#     finally:
#         if connection.is_connected():
#             cursor.close()
#             connection.close()
#
#
# @bot1.command()
# async def –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ(ctx):
#     if ctx.guild is None:
#         await ctx.send('–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ "–Ø–Ω–¥–µ–∫—Å –õ–∞–≤–∫–∞"')
#         return
#
#     if str(ctx.guild.id) != '1028293393245286440':
#         await ctx.send('–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ "–Ø–Ω–¥–µ–∫—Å –õ–∞–≤–∫–∞"')
#         return
#     voice_channel = ctx.author.voice.channel
#     if voice_channel:
#         missing_users = await get_missing_users_in_channel(voice_channel)
#         if missing_users:
#             embed = discord.Embed(title="–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:", color=discord.Color.red())
#             for i, (user, group) in enumerate(missing_users, start=1):
#                 embed.add_field(name=f"{i}. {user}", value=group, inline=False)
#             await ctx.send(embed=embed)
#         else:
#             await ctx.send("–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ.")
#     else:
#         await ctx.send("–í—ã –¥–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
#
bot1.run(TOKEN)
