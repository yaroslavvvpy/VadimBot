import discord
from discord import app_commands
from discord.ext import commands
from datetime import datetime
import pyaudio
import wave
import asyncio
import openai
from io import BytesIO
import requests
import mysql.connector
from mysql.connector import Error
import speech_recognition as sr

url = "https://discord.com/api/v10/applications/1224781491003719821/commands"

lesson_json = {
    "name": "—É—Ä–æ–∫",
    "type": 1,
    "description": "–ù–∞—á–∏–Ω–∞–µ—Ç –∏–ª–∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç —É—Ä–æ–∫",
    "options": [
        {
            "name": "–æ–ø—Ü–∏—è",
            "description": "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é",
            "type": 3,
            "required": True,
            "choices": [
                {
                    "name": "–Ω–∞—á–∞—Ç—å",
                    "value": "–Ω–∞—á–∞—Ç—å"
                },
                {
                    "name": "–∑–∞–∫–æ–Ω—á–∏—Ç—å",
                    "value": "–∑–∞–∫–æ–Ω—á–∏—Ç—å"
                }
            ]
        }
    ]
}

voice_list_json = {
    'name': 'voice_list',
    'type': 1,
    'description': '–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ª—é–¥–µ–π –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ'
}

lessons_json = {
    'name': '—É—Ä–æ–∫–∏',
    'type': 1,
    'description': '–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Ä–æ–∫–æ–≤'
}

commands_json = {
    'name': '–∫–æ–º–∞–Ω–¥—ã',
    'type': 1,
    'description': '–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞'
}

split_json = {
    'name': '–¥–µ–ª–µ–Ω–∏–µ',
    'type': 1,
    'description': '–î–µ–ª–∏—Ç –Ω–∞ –≥—Ä—É–ø–ø—ã'
}

headers = {
    "Authorization": "Bot MTIyNDc4MTQ5MTAwMzcxOTgyMQ.GFFhzd.z6Mgbnfov6NLNyqVStGCjT1qMJE7FI70PV1YHk"
}

r = requests.post(url, headers=headers, json=lesson_json)
r1 = requests.post(url, headers=headers, json=voice_list_json)
r2 = requests.post(url, headers=headers, json=lessons_json)
r3 = requests.post(url, headers=headers, json=split_json)
r4 = requests.post(url, headers=headers, json=commands_json)

TOKEN = 'MTIyNDc4MTQ5MTAwMzcxOTgyMQ.GFFhzd.z6Mgbnfov6NLNyqVStGCjT1qMJE7FI70PV1YHk'
OPENAI_API_KEY = 'sk-proj-DDLZDXLSs1CY24w2VxwUT3BlbkFJkRot6LWVQzJ7B2efrler'

bot1 = commands.Bot(command_prefix='!', intents=discord.Intents.all())
bot = discord.Client(intents=discord.Intents.all())
tree_cls = app_commands.CommandTree(bot)

lessons_start = {}

openai.api_key = OPENAI_API_KEY

db_config = {
    'user': 'root',
    'password': 'root',
    'host': 'localhost',
    'database': 'vadimbot',
    'raise_on_warnings': True
}
conn = mysql.connector.connect(**db_config)
cursor = conn.cursor()


def summarize_text(input_text, max_tokens=1500):
    response = openai.Completion.create(
        engine="gpt-3.5-turbo-instruct",  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é –º–æ–¥–µ–ª–∏
        prompt=f"–°—É–º–º–∞—Ä–∏–∑–∏—Ä—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –∫–æ—Ä–æ—Ç–∫–æ –∏ —è—Å–Ω–æ:\n\n{input_text}",
        max_tokens=max_tokens,
        temperature=0.5  # –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä, —á—Ç–æ–±—ã –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
    )
    return response.choices[0].text.strip()


async def list_lessons(ctx):
    cursor.execute("SELECT lesson_name FROM lessons")
    lessons = cursor.fetchall()
    if lessons:
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ Embed —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ —Å–∏–Ω–∏–º —Ü–≤–µ—Ç–æ–º –≥—Ä–∞–Ω–∏—Ü—ã
        embed = discord.Embed(title=":bank: **–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–∫–∏** :bank:", description="",
                              color=0x3498db)  # –°–∏–Ω–∏–π —Ü–≤–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã

        # –ù—É–º–µ—Ä–∞—Ü–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–∫–∞ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Å–º–∞–π–ª–∏–∫–∞ –∫–Ω–∏–∂–∫–∏
        for index, lesson in enumerate(lessons, start=1):
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –±–∞–π—Ç–æ–≤ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é
            lesson_name = lesson[0].decode('utf-8') if isinstance(lesson[0], bytearray) else lesson[0]
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é, –∏–º—è —É—Ä–æ–∫–∞ –∏ —Å–º–∞–π–ª–∏–∫ –∫–Ω–∏–∂–∫–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∏–º–µ–Ω–∏ –ø–æ–ª—è
            embed.add_field(name=f"üìö{index}. **{lesson_name[0:-4]}** ", value=f"/–≤—ã—Å–ª–∞—Ç—å —É—Ä–æ–∫#{index}",
                            inline=False)

        await ctx.response.send_message(embed=embed)
    else:
        await ctx.response.send_message("–£—Ä–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")


async def send_lesson(ctx, lesson_index):
    lesson_index1 = lesson_index[(lesson_index.index("#") + 1):]
    print(lesson_index1)
    cursor.execute("SELECT extracted_text FROM audio_texts WHERE id = %s", (lesson_index1,))
    text_data = cursor.fetchone()
    if text_data:
        extracted_text = summarize_text(text_data[0])

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –∏ –≤–æ–∑–º–æ–∂–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        if len(extracted_text) > 2000:  # Discord –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è 2000 —Å–∏–º–≤–æ–ª–∞–º–∏
            parts = [extracted_text[i:i+2000] for i in range(0, len(extracted_text), 2000)]
            for part in parts:
                await ctx.response.send_message(part)
        else:
            await ctx.response.send_message(extracted_text)
    else:
        await ctx.response.send_message("–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Ç–µ–∫—Å—Ç —É—Ä–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω.")


def speech_recognitor(file):
    recognizer = sr.Recognizer()
    audio_file = file

    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        connection = mysql.connector.connect(
            host='localhost',
            database='vadimbot',
            user='root',
            password='root'
        )
        cursor = connection.cursor()

        with sr.AudioFile(audio_file) as source:
            audio_data = recognizer.record(source)
            try:
                text = recognizer.recognize_google(audio_data, language="ru-RU")
                print("–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –∞—É–¥–∏–æ:", text)
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                query = "INSERT INTO audio_texts (extracted_text) VALUES (%s)"
                cursor.execute(query, (text,))
                connection.commit()
                print("–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
            except sr.UnknownValueError:
                print("Google Speech Recognition –Ω–µ —Å–º–æ–≥ –ø–æ–Ω—è—Ç—å –∞—É–¥–∏–æ")
            except sr.RequestError as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —É —Å–ª—É–∂–±—ã Google Speech Recognition; {e}")

    except Error as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ MySQL", e)
    finally:
        if connection.is_connected():
            cursor.close()
            connection.close()
            print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MySQL –∑–∞–∫—Ä—ã—Ç–æ")


@tree_cls.command(name='—É—Ä–æ–∫–∏')
async def lessons_command(interaction):
    await list_lessons(interaction)


@bot1.command(name='–≤—ã—Å–ª–∞—Ç—å')
async def send_lesson_command(ctx, *, text):
    await send_lesson(ctx, text)


@tree_cls.command(name='–∫–æ–º–∞–Ω–¥—ã')
async def commands_list(interaction):
    embed = discord.Embed(title='–ö–æ–º–∞–Ω–¥—ã', color=0xFF5733)
    embed.add_field(name='!–∑–∞–ø—Ä–æ—Å', value='–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ª—é–±—ã–µ –∑–∞–ø—Ä–æ—Å—ã')
    embed.add_field(name='!–≥–µ–Ω–µ—Ä–∞—Ü–∏—è', value='–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É –ø–æ –∑–∞–ø—Ä–æ—Å—É')
    embed.add_field(name='!–≤—ã—Å–ª–∞—Ç—å', value='–í—ã—Å—ã–ª–∞–µ—Ç –∫–æ–ø—Å–ø–µ–∫—Ç —É—Ä–æ–∫–∞')
    embed.add_field(name='/—É—Ä–æ–∫', value='–ù–∞—á–∏–Ω–∞–µ—Ç –∏–ª–∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç —É—Ä–æ–∫')
    embed.add_field(name='/—É—Ä–æ–∫–∏', value='–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Ä–æ–∫–æ–≤')
    embed.add_field(name='/–¥–µ–ª–µ–Ω–∏–µ', value='–î–µ–ª–∏—Ç –Ω–∞ –≥—Ä—É–ø–ø—ã')
    embed.add_field(name='/voice_list', value='–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ª—é–¥–µ–π –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ')
    await interaction.response.send_message(embed=embed)


def save_voice_file_to_db(file_path):
    try:
        connection = mysql.connector.connect(
            host='localhost',
            database='vadimbot',
            user='root',
            password='root'
        )
        cursor = connection.cursor()

        with open(file_path, 'rb') as file:
            binary_data = file.read()

        query = "INSERT INTO audio_files (filename, audio_data) VALUES (%s, %s)"
        current_date = datetime.now().strftime("%d.%m.%Y")
        cursor.execute(query, (f"–£—Ä–æ–∫ –Ø.–õ - {current_date}.wav", binary_data))
        connection.commit()
        print("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    except Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –≤ –ë–î: {e}")
    finally:
        if connection.is_connected():
            cursor.close()
            connection.close()


def save_file2():
    connection = None
    cursor = None
    try:
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        connection = mysql.connector.connect(
            host='localhost',
            database='vadimbot',
            user='root',
            password='root'
        )
        cursor = connection.cursor()

        # –°–æ–∑–¥–∞–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–∞
        query = "INSERT INTO lessons (lesson_name) VALUES (%s)"
        current_date = datetime.now().strftime("%d.%m.%Y")
        lesson_name = f"–£—Ä–æ–∫ –Ø.–õ - {current_date}"

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        cursor.execute(query, (lesson_name,))

        # –§–∏–∫—Å–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        connection.commit()
        print("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    except Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –≤ –ë–î: {e}")
    finally:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        if connection and connection.is_connected():
            cursor.close()
            connection.close()
            print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.")


def generate_image(text):
    response = openai.Image.create(
        model="dall-e-3",
        prompt=str(text),
        n=1,
        size="1024x1024"
    )
    image_url = response.data[0].url
    response = requests.get(image_url)
    image_bytes = BytesIO(response.content)
    return image_bytes


def generate_text(prompt, max_tokens=1500):
    # –ó–∞–ø—Ä–æ—Å –∫ GPT API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
    response = openai.Completion.create(
        engine="gpt-3.5-turbo-instruct",
        prompt=prompt,
        max_tokens=max_tokens
    )
    return response.choices[0].text.strip()


@bot1.command()
async def –≥–µ–Ω–µ—Ä–∞—Ü–∏—è(ctx, *, text):
    image_bytes = generate_image(text)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã !–≥–µ–Ω–µ—Ä–∞—Ü–∏—è
    await ctx.channel.send(file=discord.File(fp=image_bytes, filename='image.png'))


@bot1.command()
async def –∑–∞–ø—Ä–æ—Å(ctx, *, text):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã !–∑–∞–ø—Ä–æ—Å
    await ctx.send(generate_text(text))


@tree_cls.command()
async def —É—Ä–æ–∫(interaction):
    voice_channel_id = 1224776362238279766  # ID –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞

    if interaction.data['options'][0]['value'] == "–Ω–∞—á–∞—Ç—å":
        global vc
        if interaction.user.voice:
            voice_channel = interaction.user.voice.channel
            vc = await voice_channel.connect()
            lessons_start[interaction.guild.id] = datetime.now()
            print(f"–£—Ä–æ–∫ –Ω–∞—á–∞—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {interaction.guild.id}")
            await interaction.response.send_message("–£—Ä–æ–∫ –Ω–∞—á–∞–ª—Å—è!")
            audio = pyaudio.PyAudio()
            await record_audio(interaction, audio)
        else:
            await interaction.response.send_message("–í—ã –¥–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ.")

    elif interaction.data['options'][0]['value'] == "–∑–∞–∫–æ–Ω—á–∏—Ç—å":
        global is_recording
        if is_recording:
            is_recording = False
            if interaction.guild.id in lessons_start:
                lesson_duration = datetime.now() - lessons_start.pop(interaction.guild.id)
                minutes, seconds = divmod(lesson_duration.seconds, 60)
                await interaction.response.send_message(f"–£—Ä–æ–∫ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è! –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Ä–æ–∫–∞: "
                                                        f"{minutes} –º–∏–Ω—É—Ç {seconds} —Å–µ–∫—É–Ω–¥.")
                is_recording = False
            else:
                await interaction.response.send_message("–£—Ä–æ–∫ –Ω–µ –±—ã–ª –Ω–∞—á–∞—Ç –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ.")
        else:
            await interaction.response.send_message("–ó–∞–ø–∏—Å—å –Ω–µ –≤–µ–¥–µ—Ç—Å—è.")


is_recording = False
frames = []
vc = None


async def record_audio(ctx, audio):
    global is_recording, frames, vc
    is_recording = True
    frames = []
    FORMAT = pyaudio.paInt16
    CHANNELS = 1
    RATE = 44100
    CHUNK = 1024
    WAVE_OUTPUT_FILENAME = "output.wav"

    stream = audio.open(format=FORMAT, channels=CHANNELS,
                        rate=RATE, input=True,
                        frames_per_buffer=CHUNK)

    while is_recording:
        data = stream.read(CHUNK)
        frames.append(data)
        await asyncio.sleep(0)  # –ü–æ–∑–≤–æ–ª—è–µ—Ç –¥—Ä—É–≥–∏–º –∑–∞–¥–∞—á–∞–º –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è

    stream.stop_stream()
    stream.close()
    audio.terminate()

    wf = wave.open(WAVE_OUTPUT_FILENAME, 'wb')
    wf.setnchannels(CHANNELS)
    wf.setsampwidth(audio.get_sample_size(FORMAT))
    wf.setframerate(RATE)
    wf.writeframes(b''.join(frames))
    wf.close()

    if vc:
        await vc.disconnect()
        vc = None
    zvyk = discord.File(WAVE_OUTPUT_FILENAME)
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –≤ —á–∞—Ç –Ω–µ —Ä–æ–±–∏—Ç
    # await ctx.response.send_message("–ê—É–¥–∏–æ–∑–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –±–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω –æ—Ç –∫–∞–Ω–∞–ª–∞!", file=zvyk)
    speech_recognitor(WAVE_OUTPUT_FILENAME)
    save_voice_file_to_db(WAVE_OUTPUT_FILENAME)
    save_file2()


@tree_cls.command()
async def voice_list(interaction):
    voice_channel_members = []
    for guild in bot.guilds:
        for channel in guild.voice_channels:
            for member in channel.members:
                voice_channel_members.append(member.name)
    if voice_channel_members:
        await interaction.response.send_message("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö:\n" +
                                                '\n'.join(voice_channel_members))
    else:
        await interaction.response.send_message("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö")


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏—è
message_id_for_reactions = None


@tree_cls.command()
async def –¥–µ–ª–µ–Ω–∏–µ(interaction: discord.Interaction):
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await interaction.response.send_message("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É:", ephemeral=False)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    message = await interaction.original_response()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–π –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
    await message.add_reaction('1Ô∏è‚É£')
    await message.add_reaction('2Ô∏è‚É£')

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏–ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    global message_id_for_reactions
    message_id_for_reactions = message.id

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª—É—à–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–∞–∫—Ü–∏–π
    @bot.event
    async def on_reaction_add(reaction, user):
        if reaction.message_id != message_id_for_reactions or user == bot.user:
            return

        group_name = '–ì—Ä—É–ø–ø–∞ 1' if str(reaction.emoji) == '1Ô∏è‚É£' else '–ì—Ä—É–ø–ø–∞ 2'

        # –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏
        modal = discord.ui.Modal(title="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞")
        name_input = discord.ui.TextInput(label="–ò–º—è", placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é", style=discord.TextStyle.short)

        modal.add_item(name_input)

        async def on_submit(self, interaction: discord.Interaction):
            # –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            connection = mysql.connector.connect(host='localhost', database='vadimbot', user='root',
                                                 password='root')
            cursor = connection.cursor()

            # SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            query = "INSERT INTO participants (name, group_name) VALUES (%s, %s)"
            values = (self.children[0].value, self.children[1].value, group_name)

            cursor.execute(query, values)
            connection.commit()

            cursor.close()
            connection.close()

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await interaction.followup.send(
                f"–£—á–∞—Å—Ç–Ω–∏–∫ {self.children[0].value} {self.children[1].value} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ {group_name}",
                ephemeral=True)

        modal.on_submit = on_submit
        await interaction.response.send_modal(modal)

@bot.event
async def on_raw_reaction_add(payload: discord.RawReactionActionEvent):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ä–µ–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ –Ω—É–∂–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
    if payload.message_id != message_id_for_reactions:
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–µ—Ä–≤–µ—Ä–∞
    guild = bot.get_guild(payload.guild_id)
    member = guild.get_member(payload.user_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π —Ä–µ–∞–∫—Ü–∏–∏ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏
    if str(payload.emoji) == '1Ô∏è‚É£':
        role = discord.utils.get(guild.roles, name="1 –≥—Ä—É–ø–ø–∞")
        await member.add_roles(role)
        await member.send("–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ 1 –≥—Ä—É–ø–ø—É.")
    elif str(payload.emoji) == '2Ô∏è‚É£':
        role = discord.utils.get(guild.roles, name="2 –≥—Ä—É–ø–ø–∞")
        await member.add_roles(role)
        await member.send("–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ 2 –≥—Ä—É–ø–ø—É.")

bot.run(TOKEN)
